import { Request, Response } from 'express';
import { IntegrationSettings, integrationSettingsModel } from '../models/integration-settings.model';

export const integrationSettingsController = {
  /**
   * Get all integration settings
   */
  getAll: async (req: Request, res: Response) => {
    try {
      const integrations = await integrationSettingsModel.getAll();
      
      // Mask API keys for security
      const maskedIntegrations = integrations.map(integration => ({
        ...integration,
        api_key: `${integration.api_key.substring(0, 8)}...${integration.api_key.substring(integration.api_key.length - 8)}`
      }));
      
      res.status(200).json({
        success: true,
        message: 'Integration settings retrieved successfully',
        data: maskedIntegrations
      });
    } catch (error) {
      console.error('Error in getAll controller:', error);
      res.status(500).json({
        success: false,
        message: 'Failed to retrieve integration settings',
        error: (error as Error).message
      });
    }
  },

  /**
   * Get integration settings by ID
   */
  getById: async (req: Request, res: Response) => {
    try {
      const id = parseInt(req.params.id);
      
      if (isNaN(id)) {
        return res.status(400).json({
          success: false,
          message: 'Invalid integration ID'
        });
      }
      
      const integration = await integrationSettingsModel.getById(id);
      
      if (!integration) {
        return res.status(404).json({
          success: false,
          message: 'Integration settings not found'
        });
      }
      
      // Mask API key for security
      const maskedIntegration = {
        ...integration,
        api_key: `${integration.api_key.substring(0, 8)}...${integration.api_key.substring(integration.api_key.length - 8)}`
      };
      
      res.status(200).json({
        success: true,
        message: 'Integration settings retrieved successfully',
        data: maskedIntegration
      });
    } catch (error) {
      console.error('Error in getById controller:', error);
      res.status(500).json({
        success: false,
        message: 'Failed to retrieve integration settings',
        error: (error as Error).message
      });
    }
  },

  /**
   * Create a new integration setting
   */
  create: async (req: Request, res: Response) => {
    try {
      const { name, type, is_enabled, field_mapping, default_assignee, webhook_url, config, store_id } = req.body;
      
      // Validate required fields
      if (!name || !type) {
        return res.status(400).json({
          success: false,
          message: 'Name and type are required fields'
        });
      }
      
      // Validate type
      const validTypes = [
        'elementor', 
        'contact-form-7', 
        'facebook', 
        'custom', 
        'generic',
        'google-ads',
        'facebook-ads',
        'google-analytics',
        'google-search-console',
        'multi-supplier-manager'
      ];
      
      if (!validTypes.includes(type)) {
        return res.status(400).json({
          success: false,
          message: 'Invalid integration type'
        });
      }
      
      const integration: IntegrationSettings = {
        name,
        type: type as any,
        api_key: '', // Will be generated by the model
        is_enabled: is_enabled !== undefined ? is_enabled : true,
        field_mapping: field_mapping || undefined,
        default_assignee: default_assignee ? parseInt(default_assignee as string) : undefined,
        webhook_url: webhook_url || undefined,
        store_id: store_id || undefined,
        settings: config || undefined // Store config in settings field
      };
      
      const integrationId = await integrationSettingsModel.create(integration);
      
      // Get the created integration with the generated API key
      const createdIntegration = await integrationSettingsModel.getById(integrationId);
      
      res.status(201).json({
        success: true,
        message: 'Integration settings created successfully',
        data: createdIntegration
      });
    } catch (error) {
      console.error('Error in create controller:', error);
      res.status(500).json({
        success: false,
        message: 'Failed to create integration settings',
        error: (error as Error).message
      });
    }
  },

  /**
   * Update an existing integration setting
   */
  update: async (req: Request, res: Response) => {
    try {
      const id = parseInt(req.params.id);
      
      if (isNaN(id)) {
        return res.status(400).json({
          success: false,
          message: 'Invalid integration ID'
        });
      }
      
      // Check if integration exists
      const existingIntegration = await integrationSettingsModel.getById(id);
      
      if (!existingIntegration) {
        return res.status(404).json({
          success: false,
          message: 'Integration settings not found'
        });
      }
      
      const { name, type, is_enabled, field_mapping, default_assignee, webhook_url, config, store_id } = req.body;
      
      // Validate type if provided
      const validTypes = [
        'elementor', 
        'contact-form-7', 
        'facebook', 
        'custom', 
        'generic',
        'google-ads',
        'facebook-ads',
        'google-analytics',
        'google-search-console',
        'multi-supplier-manager'
      ];
      
      if (type && !validTypes.includes(type)) {
        return res.status(400).json({
          success: false,
          message: 'Invalid integration type'
        });
      }
      
      const integrationUpdate: Partial<IntegrationSettings> = {};
      
      if (name !== undefined) integrationUpdate.name = name;
      if (type !== undefined) integrationUpdate.type = type as any;
      if (is_enabled !== undefined) integrationUpdate.is_enabled = is_enabled;
      if (field_mapping !== undefined) integrationUpdate.field_mapping = field_mapping;
      if (default_assignee !== undefined) {
        integrationUpdate.default_assignee = default_assignee ? parseInt(default_assignee as string) : undefined;
      }
      if (webhook_url !== undefined) integrationUpdate.webhook_url = webhook_url;
      if (config !== undefined) integrationUpdate.settings = config;
      if (store_id !== undefined) integrationUpdate.store_id = store_id;
      
      const updated = await integrationSettingsModel.update(id, integrationUpdate);
      
      if (!updated) {
        return res.status(400).json({
          success: false,
          message: 'No changes to update'
        });
      }
      
      // Get the updated integration
      const updatedIntegration = await integrationSettingsModel.getById(id);
      
      // Mask API key for security
      const maskedIntegration = {
        ...updatedIntegration,
        api_key: `${updatedIntegration!.api_key.substring(0, 8)}...${updatedIntegration!.api_key.substring(updatedIntegration!.api_key.length - 8)}`
      };
      
      res.status(200).json({
        success: true,
        message: 'Integration settings updated successfully',
        data: maskedIntegration
      });
    } catch (error) {
      console.error('Error in update controller:', error);
      res.status(500).json({
        success: false,
        message: 'Failed to update integration settings',
        error: (error as Error).message
      });
    }
  },

  /**
   * Delete an integration setting
   */
  delete: async (req: Request, res: Response) => {
    try {
      const id = parseInt(req.params.id);
      
      if (isNaN(id)) {
        return res.status(400).json({
          success: false,
          message: 'Invalid integration ID'
        });
      }
      
      const deleted = await integrationSettingsModel.delete(id);
      
      if (!deleted) {
        return res.status(404).json({
          success: false,
          message: 'Integration settings not found'
        });
      }
      
      res.status(200).json({
        success: true,
        message: 'Integration settings deleted successfully'
      });
    } catch (error) {
      console.error('Error in delete controller:', error);
      res.status(500).json({
        success: false,
        message: 'Failed to delete integration settings',
        error: (error as Error).message
      });
    }
  },

  /**
   * Regenerate API key for an integration
   */
  regenerateApiKey: async (req: Request, res: Response) => {
    try {
      const id = parseInt(req.params.id);
      
      if (isNaN(id)) {
        return res.status(400).json({
          success: false,
          message: 'Invalid integration ID'
        });
      }
      
      // Check if integration exists
      const existingIntegration = await integrationSettingsModel.getById(id);
      
      if (!existingIntegration) {
        return res.status(404).json({
          success: false,
          message: 'Integration settings not found'
        });
      }
      
      const newApiKey = await integrationSettingsModel.regenerateApiKey(id);
      
      res.status(200).json({
        success: true,
        message: 'API key regenerated successfully',
        data: {
          api_key: newApiKey
        }
      });
    } catch (error) {
      console.error('Error in regenerateApiKey controller:', error);
      res.status(500).json({
        success: false,
        message: 'Failed to regenerate API key',
        error: (error as Error).message
      });
    }
  },

  /**
   * Get webhook logs for an integration
   */
  getWebhookLogs: async (req: Request, res: Response) => {
    try {
      const id = parseInt(req.params.id);
      
      if (isNaN(id)) {
        return res.status(400).json({
          success: false,
          message: 'Invalid integration ID'
        });
      }
      
      // Check if integration exists
      const existingIntegration = await integrationSettingsModel.getById(id);
      
      if (!existingIntegration) {
        return res.status(404).json({
          success: false,
          message: 'Integration settings not found'
        });
      }
      
      const limit = req.query.limit ? parseInt(req.query.limit as string) : 100;
      
      const logs = await integrationSettingsModel.getWebhookLogs(id, limit);
      
      res.status(200).json({
        success: true,
        message: 'Webhook logs retrieved successfully',
        data: logs
      });
    } catch (error) {
      console.error('Error in getWebhookLogs controller:', error);
      res.status(500).json({
        success: false,
        message: 'Failed to retrieve webhook logs',
        error: (error as Error).message
      });
    }
  },

  /**
   * Get webhook log by request ID
   */
  getWebhookLogByRequestId: async (req: Request, res: Response) => {
    try {
      const requestId = req.params.requestId;
      
      if (!requestId) {
        return res.status(400).json({
          success: false,
          message: 'Invalid request ID'
        });
      }
      
      const log = await integrationSettingsModel.getWebhookLogByRequestId(requestId);
      
      if (!log) {
        return res.status(404).json({
          success: false,
          message: 'Webhook log not found'
        });
      }
      
      res.status(200).json({
        success: true,
        message: 'Webhook log retrieved successfully',
        data: log
      });
    } catch (error) {
      console.error('Error in getWebhookLogByRequestId controller:', error);
      res.status(500).json({
        success: false,
        message: 'Failed to retrieve webhook log',
        error: (error as Error).message
      });
    }
  },

  /**
   * Get webhook URL for an integration
   */
  getWebhookUrl: async (req: Request, res: Response) => {
    try {
      const id = parseInt(req.params.id);
      
      if (isNaN(id)) {
        return res.status(400).json({
          success: false,
          message: 'Invalid integration ID'
        });
      }
      
      // Check if integration exists
      const integration = await integrationSettingsModel.getById(id);
      
      if (!integration) {
        return res.status(404).json({
          success: false,
          message: 'Integration settings not found'
        });
      }
      
      // Construct the webhook URL
      const baseUrl = process.env.API_BASE_URL || `${req.protocol}://${req.get('host')}`;
      const webhookUrl = `${baseUrl}/api/leads/webhook`;
      
      res.status(200).json({
        success: true,
        message: 'Webhook URL retrieved successfully',
        data: {
          webhook_url: webhookUrl,
          api_key: integration.api_key,
          instructions: getInstructions(integration.type, webhookUrl, integration.api_key)
        }
      });
    } catch (error) {
      console.error('Error in getWebhookUrl controller:', error);
      res.status(500).json({
        success: false,
        message: 'Failed to retrieve webhook URL',
        error: (error as Error).message
      });
    }
  }
};

/**
 * Get integration-specific instructions
 */
function getInstructions(type: string, webhookUrl: string, apiKey: string): string {
  switch (type) {
    case 'multi-supplier-manager':
      return `
## הגדרת Multi-Supplier Manager

1. היכנס להגדרות הפלאגין Multi-Supplier Manager בלוח הניהול של WordPress.
2. עבור לכרטיסיית "הגדרות" בתפריט הפלאגין.
3. הפעל את אפשרות ה-API על ידי סימון התיבה "אפשר API".
4. הזן את כתובת ה-API הבאה בשדה "כתובת API": \`${webhookUrl}\`
5. הזן את מפתח ה-API בשדה "API Key": \`${apiKey}\`
6. אין צורך להזין API Secret (השדה יכול להישאר ריק).
7. שמור את ההגדרות.

לבדיקה, עבור לדף הדיבאג בפלאגין ובצע בדיקת API עם הפרמטרים הבאים:
- נקודת קצה: suppliers או costs/by-date-range
- כותרת: X-MSM-API-Key: ${apiKey}

ודא שאתה מקבל תשובה תקינה עם נתוני הספקים או עלויות.
      `;
    
    case 'elementor':
      return `
## הגדרת Webhook באלמנטור

1. התקן את התוסף "Elementor Webhook" או "Elementor Pro" (כולל Webhook Actions).
2. צור טופס חדש או ערוך טופס קיים.
3. הגדר פעולה לאחר שליחת הטופס מסוג Webhook.
4. הזן את כתובת ה-Webhook הבאה: \`${webhookUrl}\`
5. הוסף את ה-Header הבא:
   - שם: \`X-API-Key\`
   - ערך: \`${apiKey}\`
6. ודא שהנתונים נשלחים בפורמט JSON.
7. מפה את שדות הטופס לשדות הבאים:
   - name: שם מלא
   - email: כתובת אימייל
   - phone: מספר טלפון
   - message: הודעה או הערות

לבדיקה, שלח טופס ניסיון וודא שהליד נוצר במערכת.
      `;
    
    case 'contact-form-7':
      return `
## הגדרת Webhook ב-Contact Form 7

1. התקן את התוסף "Contact Form 7" ואת התוסף "Contact Form 7 Webhook" או "Contact Form 7 to API".
2. צור טופס חדש או ערוך טופס קיים.
3. עבור ללשונית "Webhook" או "Integration".
4. הזן את כתובת ה-Webhook הבאה: \`${webhookUrl}\`
5. הוסף את ה-Header הבא:
   - שם: \`X-API-Key\`
   - ערך: \`${apiKey}\`
6. הגדר את סוג הבקשה ל-POST ואת פורמט הנתונים ל-JSON.
7. מפה את שדות הטופס לשדות הבאים:
   - your-name: שם מלא
   - your-email: כתובת אימייל
   - your-tel: מספר טלפון
   - your-message: הודעה או הערות

לבדיקה, שלח טופס ניסיון וודא שהליד נוצר במערכת.
      `;
    
    case 'facebook':
      return `
## הגדרת Facebook Lead Ads

1. היכנס ל-Facebook Business Manager.
2. צור או ערוך קמפיין מסוג Lead Generation.
3. עבור להגדרות הקמפיין ובחר באפשרות "Use Webhook" או "Connect to CRM".
4. הזן את כתובת ה-Webhook הבאה: \`${webhookUrl}\`
5. הוסף את ה-Header הבא:
   - שם: \`X-API-Key\`
   - ערך: \`${apiKey}\`
6. ודא שהשדות הבאים קיימים בטופס:
   - full_name: שם מלא
   - email: כתובת אימייל
   - phone_number: מספר טלפון

לבדיקה, צור ליד ניסיון דרך הקמפיין וודא שהליד נוצר במערכת.

### הגדרה מתקדמת דרך Facebook Developer

1. היכנס ל-Facebook Developer Portal.
2. צור אפליקציה חדשה או השתמש באפליקציה קיימת.
3. הוסף את המוצר "Webhooks" לאפליקציה.
4. הגדר Webhook חדש עם הכתובת: \`${webhookUrl}\`
5. הוסף את ה-Header \`X-API-Key: ${apiKey}\`
6. בחר באירוע "leadgen" תחת Page.
7. שמור את ההגדרות וחבר את האפליקציה לדף הפייסבוק שלך.
      `;
    
    case 'custom':
      return `
## הגדרת Webhook מותאם אישית

שלח בקשת POST לכתובת הבאה:
\`${webhookUrl}\`

עם ה-Header הבא:
\`X-API-Key: ${apiKey}\`

גוף הבקשה צריך להיות בפורמט JSON ולכלול את השדות הבאים:
\`\`\`json
{
  "name": "שם הלקוח",
  "email": "email@example.com",
  "phone": "050-1234567",
  "message": "הערות או מידע נוסף"
}
\`\`\`

ניתן להתאים את שמות השדות בהגדרות האינטגרציה.

לבדיקה, שלח בקשת POST לכתובת ה-Webhook עם נתוני ניסיון וודא שהליד נוצר במערכת.
      `;
    
    default:
      return `
## הגדרת Webhook כללי

שלח בקשת POST לכתובת הבאה:
\`${webhookUrl}\`

עם ה-Header הבא:
\`X-API-Key: ${apiKey}\`

גוף הבקשה צריך להיות בפורמט JSON ולכלול את השדות הבאים:
\`\`\`json
{
  "name": "שם הלקוח",
  "email": "email@example.com",
  "phone": "050-1234567",
  "message": "הערות או מידע נוסף"
}
\`\`\`

המערכת תנסה לזהות באופן אוטומטי את השדות הנפוצים.

לבדיקה, שלח בקשת POST לכתובת ה-Webhook עם נתוני ניסיון וודא שהליד נוצר במערכת.
      `;
  }
}
